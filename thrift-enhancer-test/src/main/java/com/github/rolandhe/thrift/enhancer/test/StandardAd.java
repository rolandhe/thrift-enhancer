/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.rolandhe.thrift.enhancer.test;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-09-28")
public class StandardAd implements org.apache.thrift.TBase<StandardAd, StandardAd._Fields>, java.io.Serializable, Cloneable, Comparable<StandardAd> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StandardAd");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("seq", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField IS_START_FIELD_DESC = new org.apache.thrift.protocol.TField("isStart", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("percent", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField AD_STYLE_FIELD_DESC = new org.apache.thrift.protocol.TField("adStyle", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StandardAdStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StandardAdTupleSchemeFactory();

  public byte type; // required
  public short category; // required
  public int id; // required
  public long seq; // required
  public String name; // required
  public java.nio.ByteBuffer content; // required
  public boolean isStart; // required
  public double percent; // required
  /**
   *
   * @see AdStyle
   */
  public AdStyle adStyle; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TYPE((short)1, "type"),
    CATEGORY((short)2, "category"),
    ID((short)3, "id"),
    SEQ((short)4, "seq"),
    NAME((short)5, "name"),
    CONTENT((short)6, "content"),
    IS_START((short)7, "isStart"),
    PERCENT((short)8, "percent"),
    /**
     *
     * @see AdStyle
     */
    AD_STYLE((short)9, "adStyle");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // CATEGORY
          return CATEGORY;
        case 3: // ID
          return ID;
        case 4: // SEQ
          return SEQ;
        case 5: // NAME
          return NAME;
        case 6: // CONTENT
          return CONTENT;
        case 7: // IS_START
          return IS_START;
        case 8: // PERCENT
          return PERCENT;
        case 9: // AD_STYLE
          return AD_STYLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TYPE_ISSET_ID = 0;
  private static final int __CATEGORY_ISSET_ID = 1;
  private static final int __ID_ISSET_ID = 2;
  private static final int __SEQ_ISSET_ID = 3;
  private static final int __ISSTART_ISSET_ID = 4;
  private static final int __PERCENT_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEQ, new org.apache.thrift.meta_data.FieldMetaData("seq", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.IS_START, new org.apache.thrift.meta_data.FieldMetaData("isStart", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PERCENT, new org.apache.thrift.meta_data.FieldMetaData("percent", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AD_STYLE, new org.apache.thrift.meta_data.FieldMetaData("adStyle", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AdStyle.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StandardAd.class, metaDataMap);
  }

  public StandardAd() {
  }

  public StandardAd(
    byte type,
    short category,
    int id,
    long seq,
    String name,
    java.nio.ByteBuffer content,
    boolean isStart,
    double percent,
    AdStyle adStyle)
  {
    this();
    this.type = type;
    setTypeIsSet(true);
    this.category = category;
    setCategoryIsSet(true);
    this.id = id;
    setIdIsSet(true);
    this.seq = seq;
    setSeqIsSet(true);
    this.name = name;
    this.content = org.apache.thrift.TBaseHelper.copyBinary(content);
    this.isStart = isStart;
    setIsStartIsSet(true);
    this.percent = percent;
    setPercentIsSet(true);
    this.adStyle = adStyle;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StandardAd(StandardAd other) {
    __isset_bitfield = other.__isset_bitfield;
    this.type = other.type;
    this.category = other.category;
    this.id = other.id;
    this.seq = other.seq;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetContent()) {
      this.content = org.apache.thrift.TBaseHelper.copyBinary(other.content);
    }
    this.isStart = other.isStart;
    this.percent = other.percent;
    if (other.isSetAdStyle()) {
      this.adStyle = other.adStyle;
    }
  }

  public StandardAd deepCopy() {
    return new StandardAd(this);
  }

  @Override
  public void clear() {
    setTypeIsSet(false);
    this.type = 0;
    setCategoryIsSet(false);
    this.category = 0;
    setIdIsSet(false);
    this.id = 0;
    setSeqIsSet(false);
    this.seq = 0;
    this.name = null;
    this.content = null;
    setIsStartIsSet(false);
    this.isStart = false;
    setPercentIsSet(false);
    this.percent = 0.0;
    this.adStyle = null;
  }

  public byte getType() {
    return this.type;
  }

  public StandardAd setType(byte type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public short getCategory() {
    return this.category;
  }

  public StandardAd setCategory(short category) {
    this.category = category;
    setCategoryIsSet(true);
    return this;
  }

  public void unsetCategory() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CATEGORY_ISSET_ID);
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CATEGORY_ISSET_ID);
  }

  public void setCategoryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CATEGORY_ISSET_ID, value);
  }

  public int getId() {
    return this.id;
  }

  public StandardAd setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getSeq() {
    return this.seq;
  }

  public StandardAd setSeq(long seq) {
    this.seq = seq;
    setSeqIsSet(true);
    return this;
  }

  public void unsetSeq() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEQ_ISSET_ID);
  }

  /** Returns true if field seq is set (has been assigned a value) and false otherwise */
  public boolean isSetSeq() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEQ_ISSET_ID);
  }

  public void setSeqIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEQ_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public StandardAd setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public byte[] getContent() {
    setContent(org.apache.thrift.TBaseHelper.rightSize(content));
    return content == null ? null : content.array();
  }

  public java.nio.ByteBuffer bufferForContent() {
    return org.apache.thrift.TBaseHelper.copyBinary(content);
  }

  public StandardAd setContent(byte[] content) {
    this.content = content == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(content.clone());
    return this;
  }

  public StandardAd setContent(java.nio.ByteBuffer content) {
    this.content = org.apache.thrift.TBaseHelper.copyBinary(content);
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public boolean isIsStart() {
    return this.isStart;
  }

  public StandardAd setIsStart(boolean isStart) {
    this.isStart = isStart;
    setIsStartIsSet(true);
    return this;
  }

  public void unsetIsStart() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSTART_ISSET_ID);
  }

  /** Returns true if field isStart is set (has been assigned a value) and false otherwise */
  public boolean isSetIsStart() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSTART_ISSET_ID);
  }

  public void setIsStartIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSTART_ISSET_ID, value);
  }

  public double getPercent() {
    return this.percent;
  }

  public StandardAd setPercent(double percent) {
    this.percent = percent;
    setPercentIsSet(true);
    return this;
  }

  public void unsetPercent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PERCENT_ISSET_ID);
  }

  /** Returns true if field percent is set (has been assigned a value) and false otherwise */
  public boolean isSetPercent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PERCENT_ISSET_ID);
  }

  public void setPercentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PERCENT_ISSET_ID, value);
  }

  /**
   *
   * @see AdStyle
   */
  public AdStyle getAdStyle() {
    return this.adStyle;
  }

  /**
   *
   * @see AdStyle
   */
  public StandardAd setAdStyle(AdStyle adStyle) {
    this.adStyle = adStyle;
    return this;
  }

  public void unsetAdStyle() {
    this.adStyle = null;
  }

  /** Returns true if field adStyle is set (has been assigned a value) and false otherwise */
  public boolean isSetAdStyle() {
    return this.adStyle != null;
  }

  public void setAdStyleIsSet(boolean value) {
    if (!value) {
      this.adStyle = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Byte)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((Short)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case SEQ:
      if (value == null) {
        unsetSeq();
      } else {
        setSeq((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        if (value instanceof byte[]) {
          setContent((byte[])value);
        } else {
          setContent((java.nio.ByteBuffer)value);
        }
      }
      break;

    case IS_START:
      if (value == null) {
        unsetIsStart();
      } else {
        setIsStart((Boolean)value);
      }
      break;

    case PERCENT:
      if (value == null) {
        unsetPercent();
      } else {
        setPercent((Double)value);
      }
      break;

    case AD_STYLE:
      if (value == null) {
        unsetAdStyle();
      } else {
        setAdStyle((AdStyle)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case CATEGORY:
      return getCategory();

    case ID:
      return getId();

    case SEQ:
      return getSeq();

    case NAME:
      return getName();

    case CONTENT:
      return getContent();

    case IS_START:
      return isIsStart();

    case PERCENT:
      return getPercent();

    case AD_STYLE:
      return getAdStyle();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case CATEGORY:
      return isSetCategory();
    case ID:
      return isSetId();
    case SEQ:
      return isSetSeq();
    case NAME:
      return isSetName();
    case CONTENT:
      return isSetContent();
    case IS_START:
      return isSetIsStart();
    case PERCENT:
      return isSetPercent();
    case AD_STYLE:
      return isSetAdStyle();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StandardAd)
      return this.equals((StandardAd)that);
    return false;
  }

  public boolean equals(StandardAd that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_category = true;
    boolean that_present_category = true;
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (this.category != that.category)
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_seq = true;
    boolean that_present_seq = true;
    if (this_present_seq || that_present_seq) {
      if (!(this_present_seq && that_present_seq))
        return false;
      if (this.seq != that.seq)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_isStart = true;
    boolean that_present_isStart = true;
    if (this_present_isStart || that_present_isStart) {
      if (!(this_present_isStart && that_present_isStart))
        return false;
      if (this.isStart != that.isStart)
        return false;
    }

    boolean this_present_percent = true;
    boolean that_present_percent = true;
    if (this_present_percent || that_present_percent) {
      if (!(this_present_percent && that_present_percent))
        return false;
      if (this.percent != that.percent)
        return false;
    }

    boolean this_present_adStyle = true && this.isSetAdStyle();
    boolean that_present_adStyle = true && that.isSetAdStyle();
    if (this_present_adStyle || that_present_adStyle) {
      if (!(this_present_adStyle && that_present_adStyle))
        return false;
      if (!this.adStyle.equals(that.adStyle))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + (int) (type);

    hashCode = hashCode * 8191 + category;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(seq);

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
    if (isSetContent())
      hashCode = hashCode * 8191 + content.hashCode();

    hashCode = hashCode * 8191 + ((isStart) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(percent);

    hashCode = hashCode * 8191 + ((isSetAdStyle()) ? 131071 : 524287);
    if (isSetAdStyle())
      hashCode = hashCode * 8191 + adStyle.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(StandardAd other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeq()).compareTo(other.isSetSeq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seq, other.seq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsStart()).compareTo(other.isSetIsStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isStart, other.isStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPercent()).compareTo(other.isSetPercent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPercent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.percent, other.percent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdStyle()).compareTo(other.isSetAdStyle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdStyle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adStyle, other.adStyle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StandardAd(");
    boolean first = true;

    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("category:");
    sb.append(this.category);
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("seq:");
    sb.append(this.seq);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.content, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isStart:");
    sb.append(this.isStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("percent:");
    sb.append(this.percent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("adStyle:");
    if (this.adStyle == null) {
      sb.append("null");
    } else {
      sb.append(this.adStyle);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StandardAdStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StandardAdStandardScheme getScheme() {
      return new StandardAdStandardScheme();
    }
  }

  private static class StandardAdStandardScheme extends org.apache.thrift.scheme.StandardScheme<StandardAd> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StandardAd struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.type = iprot.readByte();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.category = iprot.readI16();
              struct.setCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.seq = iprot.readI64();
              struct.setSeqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readBinary();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_START
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isStart = iprot.readBool();
              struct.setIsStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.percent = iprot.readDouble();
              struct.setPercentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // AD_STYLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.adStyle = com.github.rolandhe.thrift.enhancer.test.AdStyle.findByValue(iprot.readI32());
              struct.setAdStyleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StandardAd struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeByte(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
      oprot.writeI16(struct.category);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEQ_FIELD_DESC);
      oprot.writeI64(struct.seq);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeBinary(struct.content);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_START_FIELD_DESC);
      oprot.writeBool(struct.isStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PERCENT_FIELD_DESC);
      oprot.writeDouble(struct.percent);
      oprot.writeFieldEnd();
      if (struct.adStyle != null) {
        oprot.writeFieldBegin(AD_STYLE_FIELD_DESC);
        oprot.writeI32(struct.adStyle.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StandardAdTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StandardAdTupleScheme getScheme() {
      return new StandardAdTupleScheme();
    }
  }

  private static class StandardAdTupleScheme extends org.apache.thrift.scheme.TupleScheme<StandardAd> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StandardAd struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetCategory()) {
        optionals.set(1);
      }
      if (struct.isSetId()) {
        optionals.set(2);
      }
      if (struct.isSetSeq()) {
        optionals.set(3);
      }
      if (struct.isSetName()) {
        optionals.set(4);
      }
      if (struct.isSetContent()) {
        optionals.set(5);
      }
      if (struct.isSetIsStart()) {
        optionals.set(6);
      }
      if (struct.isSetPercent()) {
        optionals.set(7);
      }
      if (struct.isSetAdStyle()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetType()) {
        oprot.writeByte(struct.type);
      }
      if (struct.isSetCategory()) {
        oprot.writeI16(struct.category);
      }
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetSeq()) {
        oprot.writeI64(struct.seq);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetContent()) {
        oprot.writeBinary(struct.content);
      }
      if (struct.isSetIsStart()) {
        oprot.writeBool(struct.isStart);
      }
      if (struct.isSetPercent()) {
        oprot.writeDouble(struct.percent);
      }
      if (struct.isSetAdStyle()) {
        oprot.writeI32(struct.adStyle.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StandardAd struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.type = iprot.readByte();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.category = iprot.readI16();
        struct.setCategoryIsSet(true);
      }
      if (incoming.get(2)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.seq = iprot.readI64();
        struct.setSeqIsSet(true);
      }
      if (incoming.get(4)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.content = iprot.readBinary();
        struct.setContentIsSet(true);
      }
      if (incoming.get(6)) {
        struct.isStart = iprot.readBool();
        struct.setIsStartIsSet(true);
      }
      if (incoming.get(7)) {
        struct.percent = iprot.readDouble();
        struct.setPercentIsSet(true);
      }
      if (incoming.get(8)) {
        struct.adStyle = com.github.rolandhe.thrift.enhancer.test.AdStyle.findByValue(iprot.readI32());
        struct.setAdStyleIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

