/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.rolandhe.thrift.enhancer.test;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-09-28")
public class Creative implements org.apache.thrift.TBase<Creative, Creative._Fields>, java.io.Serializable, Cloneable, Comparable<Creative> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Creative");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField STANDARD_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("standardList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField BYTE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("byteList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SHORT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("shortList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField INT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("intList", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField LONG_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("longList", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField MAP_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("mapString", org.apache.thrift.protocol.TType.MAP, (short)7);
  private static final org.apache.thrift.protocol.TField MAP_AD_FIELD_DESC = new org.apache.thrift.protocol.TField("mapAd", org.apache.thrift.protocol.TType.MAP, (short)8);
  private static final org.apache.thrift.protocol.TField INT_PAIR_FIELD_DESC = new org.apache.thrift.protocol.TField("intPair", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("spec", org.apache.thrift.protocol.TType.STRUCT, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CreativeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CreativeTupleSchemeFactory();

  public long id; // required
  public java.util.List<StandardAd> standardList; // required
  public java.util.List<Byte> byteList; // required
  public java.util.List<Short> shortList; // required
  public java.util.List<Integer> intList; // required
  public java.util.List<Long> longList; // required
  public java.util.Map<String,String> mapString; // required
  public java.util.Map<String,StandardAd> mapAd; // required
  public java.util.Map<Integer,String> intPair; // optional
  public StandardAd spec; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    STANDARD_LIST((short)2, "standardList"),
    BYTE_LIST((short)3, "byteList"),
    SHORT_LIST((short)4, "shortList"),
    INT_LIST((short)5, "intList"),
    LONG_LIST((short)6, "longList"),
    MAP_STRING((short)7, "mapString"),
    MAP_AD((short)8, "mapAd"),
    INT_PAIR((short)9, "intPair"),
    SPEC((short)10, "spec");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // STANDARD_LIST
          return STANDARD_LIST;
        case 3: // BYTE_LIST
          return BYTE_LIST;
        case 4: // SHORT_LIST
          return SHORT_LIST;
        case 5: // INT_LIST
          return INT_LIST;
        case 6: // LONG_LIST
          return LONG_LIST;
        case 7: // MAP_STRING
          return MAP_STRING;
        case 8: // MAP_AD
          return MAP_AD;
        case 9: // INT_PAIR
          return INT_PAIR;
        case 10: // SPEC
          return SPEC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.INT_PAIR};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STANDARD_LIST, new org.apache.thrift.meta_data.FieldMetaData("standardList", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StandardAd.class))));
    tmpMap.put(_Fields.BYTE_LIST, new org.apache.thrift.meta_data.FieldMetaData("byteList", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.SHORT_LIST, new org.apache.thrift.meta_data.FieldMetaData("shortList", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.INT_LIST, new org.apache.thrift.meta_data.FieldMetaData("intList", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LONG_LIST, new org.apache.thrift.meta_data.FieldMetaData("longList", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.MAP_STRING, new org.apache.thrift.meta_data.FieldMetaData("mapString", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MAP_AD, new org.apache.thrift.meta_data.FieldMetaData("mapAd", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StandardAd.class))));
    tmpMap.put(_Fields.INT_PAIR, new org.apache.thrift.meta_data.FieldMetaData("intPair", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32),
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SPEC, new org.apache.thrift.meta_data.FieldMetaData("spec", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StandardAd.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Creative.class, metaDataMap);
  }

  public Creative() {
  }

  public Creative(
    long id,
    java.util.List<StandardAd> standardList,
    java.util.List<Byte> byteList,
    java.util.List<Short> shortList,
    java.util.List<Integer> intList,
    java.util.List<Long> longList,
    java.util.Map<String,String> mapString,
    java.util.Map<String,StandardAd> mapAd,
    StandardAd spec)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.standardList = standardList;
    this.byteList = byteList;
    this.shortList = shortList;
    this.intList = intList;
    this.longList = longList;
    this.mapString = mapString;
    this.mapAd = mapAd;
    this.spec = spec;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Creative(Creative other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetStandardList()) {
      java.util.List<StandardAd> __this__standardList = new java.util.ArrayList<StandardAd>(other.standardList.size());
      for (StandardAd other_element : other.standardList) {
        __this__standardList.add(new StandardAd(other_element));
      }
      this.standardList = __this__standardList;
    }
    if (other.isSetByteList()) {
      java.util.List<Byte> __this__byteList = new java.util.ArrayList<Byte>(other.byteList);
      this.byteList = __this__byteList;
    }
    if (other.isSetShortList()) {
      java.util.List<Short> __this__shortList = new java.util.ArrayList<Short>(other.shortList);
      this.shortList = __this__shortList;
    }
    if (other.isSetIntList()) {
      java.util.List<Integer> __this__intList = new java.util.ArrayList<Integer>(other.intList);
      this.intList = __this__intList;
    }
    if (other.isSetLongList()) {
      java.util.List<Long> __this__longList = new java.util.ArrayList<Long>(other.longList);
      this.longList = __this__longList;
    }
    if (other.isSetMapString()) {
      java.util.Map<String,String> __this__mapString = new java.util.HashMap<String,String>(other.mapString);
      this.mapString = __this__mapString;
    }
    if (other.isSetMapAd()) {
      java.util.Map<String,StandardAd> __this__mapAd = new java.util.HashMap<String,StandardAd>(other.mapAd.size());
      for (java.util.Map.Entry<String, StandardAd> other_element : other.mapAd.entrySet()) {

        String other_element_key = other_element.getKey();
        StandardAd other_element_value = other_element.getValue();

        String __this__mapAd_copy_key = other_element_key;

        StandardAd __this__mapAd_copy_value = new StandardAd(other_element_value);

        __this__mapAd.put(__this__mapAd_copy_key, __this__mapAd_copy_value);
      }
      this.mapAd = __this__mapAd;
    }
    if (other.isSetIntPair()) {
      java.util.Map<Integer,String> __this__intPair = new java.util.HashMap<Integer,String>(other.intPair);
      this.intPair = __this__intPair;
    }
    if (other.isSetSpec()) {
      this.spec = new StandardAd(other.spec);
    }
  }

  public Creative deepCopy() {
    return new Creative(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.standardList = null;
    this.byteList = null;
    this.shortList = null;
    this.intList = null;
    this.longList = null;
    this.mapString = null;
    this.mapAd = null;
    this.intPair = null;
    this.spec = null;
  }

  public long getId() {
    return this.id;
  }

  public Creative setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getStandardListSize() {
    return (this.standardList == null) ? 0 : this.standardList.size();
  }

  public java.util.Iterator<StandardAd> getStandardListIterator() {
    return (this.standardList == null) ? null : this.standardList.iterator();
  }

  public void addToStandardList(StandardAd elem) {
    if (this.standardList == null) {
      this.standardList = new java.util.ArrayList<StandardAd>();
    }
    this.standardList.add(elem);
  }

  public java.util.List<StandardAd> getStandardList() {
    return this.standardList;
  }

  public Creative setStandardList(java.util.List<StandardAd> standardList) {
    this.standardList = standardList;
    return this;
  }

  public void unsetStandardList() {
    this.standardList = null;
  }

  /** Returns true if field standardList is set (has been assigned a value) and false otherwise */
  public boolean isSetStandardList() {
    return this.standardList != null;
  }

  public void setStandardListIsSet(boolean value) {
    if (!value) {
      this.standardList = null;
    }
  }

  public int getByteListSize() {
    return (this.byteList == null) ? 0 : this.byteList.size();
  }

  public java.util.Iterator<Byte> getByteListIterator() {
    return (this.byteList == null) ? null : this.byteList.iterator();
  }

  public void addToByteList(byte elem) {
    if (this.byteList == null) {
      this.byteList = new java.util.ArrayList<Byte>();
    }
    this.byteList.add(elem);
  }

  public java.util.List<Byte> getByteList() {
    return this.byteList;
  }

  public Creative setByteList(java.util.List<Byte> byteList) {
    this.byteList = byteList;
    return this;
  }

  public void unsetByteList() {
    this.byteList = null;
  }

  /** Returns true if field byteList is set (has been assigned a value) and false otherwise */
  public boolean isSetByteList() {
    return this.byteList != null;
  }

  public void setByteListIsSet(boolean value) {
    if (!value) {
      this.byteList = null;
    }
  }

  public int getShortListSize() {
    return (this.shortList == null) ? 0 : this.shortList.size();
  }

  public java.util.Iterator<Short> getShortListIterator() {
    return (this.shortList == null) ? null : this.shortList.iterator();
  }

  public void addToShortList(short elem) {
    if (this.shortList == null) {
      this.shortList = new java.util.ArrayList<Short>();
    }
    this.shortList.add(elem);
  }

  public java.util.List<Short> getShortList() {
    return this.shortList;
  }

  public Creative setShortList(java.util.List<Short> shortList) {
    this.shortList = shortList;
    return this;
  }

  public void unsetShortList() {
    this.shortList = null;
  }

  /** Returns true if field shortList is set (has been assigned a value) and false otherwise */
  public boolean isSetShortList() {
    return this.shortList != null;
  }

  public void setShortListIsSet(boolean value) {
    if (!value) {
      this.shortList = null;
    }
  }

  public int getIntListSize() {
    return (this.intList == null) ? 0 : this.intList.size();
  }

  public java.util.Iterator<Integer> getIntListIterator() {
    return (this.intList == null) ? null : this.intList.iterator();
  }

  public void addToIntList(int elem) {
    if (this.intList == null) {
      this.intList = new java.util.ArrayList<Integer>();
    }
    this.intList.add(elem);
  }

  public java.util.List<Integer> getIntList() {
    return this.intList;
  }

  public Creative setIntList(java.util.List<Integer> intList) {
    this.intList = intList;
    return this;
  }

  public void unsetIntList() {
    this.intList = null;
  }

  /** Returns true if field intList is set (has been assigned a value) and false otherwise */
  public boolean isSetIntList() {
    return this.intList != null;
  }

  public void setIntListIsSet(boolean value) {
    if (!value) {
      this.intList = null;
    }
  }

  public int getLongListSize() {
    return (this.longList == null) ? 0 : this.longList.size();
  }

  public java.util.Iterator<Long> getLongListIterator() {
    return (this.longList == null) ? null : this.longList.iterator();
  }

  public void addToLongList(long elem) {
    if (this.longList == null) {
      this.longList = new java.util.ArrayList<Long>();
    }
    this.longList.add(elem);
  }

  public java.util.List<Long> getLongList() {
    return this.longList;
  }

  public Creative setLongList(java.util.List<Long> longList) {
    this.longList = longList;
    return this;
  }

  public void unsetLongList() {
    this.longList = null;
  }

  /** Returns true if field longList is set (has been assigned a value) and false otherwise */
  public boolean isSetLongList() {
    return this.longList != null;
  }

  public void setLongListIsSet(boolean value) {
    if (!value) {
      this.longList = null;
    }
  }

  public int getMapStringSize() {
    return (this.mapString == null) ? 0 : this.mapString.size();
  }

  public void putToMapString(String key, String val) {
    if (this.mapString == null) {
      this.mapString = new java.util.HashMap<String,String>();
    }
    this.mapString.put(key, val);
  }

  public java.util.Map<String,String> getMapString() {
    return this.mapString;
  }

  public Creative setMapString(java.util.Map<String,String> mapString) {
    this.mapString = mapString;
    return this;
  }

  public void unsetMapString() {
    this.mapString = null;
  }

  /** Returns true if field mapString is set (has been assigned a value) and false otherwise */
  public boolean isSetMapString() {
    return this.mapString != null;
  }

  public void setMapStringIsSet(boolean value) {
    if (!value) {
      this.mapString = null;
    }
  }

  public int getMapAdSize() {
    return (this.mapAd == null) ? 0 : this.mapAd.size();
  }

  public void putToMapAd(String key, StandardAd val) {
    if (this.mapAd == null) {
      this.mapAd = new java.util.HashMap<String,StandardAd>();
    }
    this.mapAd.put(key, val);
  }

  public java.util.Map<String,StandardAd> getMapAd() {
    return this.mapAd;
  }

  public Creative setMapAd(java.util.Map<String,StandardAd> mapAd) {
    this.mapAd = mapAd;
    return this;
  }

  public void unsetMapAd() {
    this.mapAd = null;
  }

  /** Returns true if field mapAd is set (has been assigned a value) and false otherwise */
  public boolean isSetMapAd() {
    return this.mapAd != null;
  }

  public void setMapAdIsSet(boolean value) {
    if (!value) {
      this.mapAd = null;
    }
  }

  public int getIntPairSize() {
    return (this.intPair == null) ? 0 : this.intPair.size();
  }

  public void putToIntPair(int key, String val) {
    if (this.intPair == null) {
      this.intPair = new java.util.HashMap<Integer,String>();
    }
    this.intPair.put(key, val);
  }

  public java.util.Map<Integer,String> getIntPair() {
    return this.intPair;
  }

  public Creative setIntPair(java.util.Map<Integer,String> intPair) {
    this.intPair = intPair;
    return this;
  }

  public void unsetIntPair() {
    this.intPair = null;
  }

  /** Returns true if field intPair is set (has been assigned a value) and false otherwise */
  public boolean isSetIntPair() {
    return this.intPair != null;
  }

  public void setIntPairIsSet(boolean value) {
    if (!value) {
      this.intPair = null;
    }
  }

  public StandardAd getSpec() {
    return this.spec;
  }

  public Creative setSpec(StandardAd spec) {
    this.spec = spec;
    return this;
  }

  public void unsetSpec() {
    this.spec = null;
  }

  /** Returns true if field spec is set (has been assigned a value) and false otherwise */
  public boolean isSetSpec() {
    return this.spec != null;
  }

  public void setSpecIsSet(boolean value) {
    if (!value) {
      this.spec = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case STANDARD_LIST:
      if (value == null) {
        unsetStandardList();
      } else {
        setStandardList((java.util.List<StandardAd>)value);
      }
      break;

    case BYTE_LIST:
      if (value == null) {
        unsetByteList();
      } else {
        setByteList((java.util.List<Byte>)value);
      }
      break;

    case SHORT_LIST:
      if (value == null) {
        unsetShortList();
      } else {
        setShortList((java.util.List<Short>)value);
      }
      break;

    case INT_LIST:
      if (value == null) {
        unsetIntList();
      } else {
        setIntList((java.util.List<Integer>)value);
      }
      break;

    case LONG_LIST:
      if (value == null) {
        unsetLongList();
      } else {
        setLongList((java.util.List<Long>)value);
      }
      break;

    case MAP_STRING:
      if (value == null) {
        unsetMapString();
      } else {
        setMapString((java.util.Map<String,String>)value);
      }
      break;

    case MAP_AD:
      if (value == null) {
        unsetMapAd();
      } else {
        setMapAd((java.util.Map<String,StandardAd>)value);
      }
      break;

    case INT_PAIR:
      if (value == null) {
        unsetIntPair();
      } else {
        setIntPair((java.util.Map<Integer,String>)value);
      }
      break;

    case SPEC:
      if (value == null) {
        unsetSpec();
      } else {
        setSpec((StandardAd)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case STANDARD_LIST:
      return getStandardList();

    case BYTE_LIST:
      return getByteList();

    case SHORT_LIST:
      return getShortList();

    case INT_LIST:
      return getIntList();

    case LONG_LIST:
      return getLongList();

    case MAP_STRING:
      return getMapString();

    case MAP_AD:
      return getMapAd();

    case INT_PAIR:
      return getIntPair();

    case SPEC:
      return getSpec();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case STANDARD_LIST:
      return isSetStandardList();
    case BYTE_LIST:
      return isSetByteList();
    case SHORT_LIST:
      return isSetShortList();
    case INT_LIST:
      return isSetIntList();
    case LONG_LIST:
      return isSetLongList();
    case MAP_STRING:
      return isSetMapString();
    case MAP_AD:
      return isSetMapAd();
    case INT_PAIR:
      return isSetIntPair();
    case SPEC:
      return isSetSpec();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Creative)
      return this.equals((Creative)that);
    return false;
  }

  public boolean equals(Creative that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_standardList = true && this.isSetStandardList();
    boolean that_present_standardList = true && that.isSetStandardList();
    if (this_present_standardList || that_present_standardList) {
      if (!(this_present_standardList && that_present_standardList))
        return false;
      if (!this.standardList.equals(that.standardList))
        return false;
    }

    boolean this_present_byteList = true && this.isSetByteList();
    boolean that_present_byteList = true && that.isSetByteList();
    if (this_present_byteList || that_present_byteList) {
      if (!(this_present_byteList && that_present_byteList))
        return false;
      if (!this.byteList.equals(that.byteList))
        return false;
    }

    boolean this_present_shortList = true && this.isSetShortList();
    boolean that_present_shortList = true && that.isSetShortList();
    if (this_present_shortList || that_present_shortList) {
      if (!(this_present_shortList && that_present_shortList))
        return false;
      if (!this.shortList.equals(that.shortList))
        return false;
    }

    boolean this_present_intList = true && this.isSetIntList();
    boolean that_present_intList = true && that.isSetIntList();
    if (this_present_intList || that_present_intList) {
      if (!(this_present_intList && that_present_intList))
        return false;
      if (!this.intList.equals(that.intList))
        return false;
    }

    boolean this_present_longList = true && this.isSetLongList();
    boolean that_present_longList = true && that.isSetLongList();
    if (this_present_longList || that_present_longList) {
      if (!(this_present_longList && that_present_longList))
        return false;
      if (!this.longList.equals(that.longList))
        return false;
    }

    boolean this_present_mapString = true && this.isSetMapString();
    boolean that_present_mapString = true && that.isSetMapString();
    if (this_present_mapString || that_present_mapString) {
      if (!(this_present_mapString && that_present_mapString))
        return false;
      if (!this.mapString.equals(that.mapString))
        return false;
    }

    boolean this_present_mapAd = true && this.isSetMapAd();
    boolean that_present_mapAd = true && that.isSetMapAd();
    if (this_present_mapAd || that_present_mapAd) {
      if (!(this_present_mapAd && that_present_mapAd))
        return false;
      if (!this.mapAd.equals(that.mapAd))
        return false;
    }

    boolean this_present_intPair = true && this.isSetIntPair();
    boolean that_present_intPair = true && that.isSetIntPair();
    if (this_present_intPair || that_present_intPair) {
      if (!(this_present_intPair && that_present_intPair))
        return false;
      if (!this.intPair.equals(that.intPair))
        return false;
    }

    boolean this_present_spec = true && this.isSetSpec();
    boolean that_present_spec = true && that.isSetSpec();
    if (this_present_spec || that_present_spec) {
      if (!(this_present_spec && that_present_spec))
        return false;
      if (!this.spec.equals(that.spec))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetStandardList()) ? 131071 : 524287);
    if (isSetStandardList())
      hashCode = hashCode * 8191 + standardList.hashCode();

    hashCode = hashCode * 8191 + ((isSetByteList()) ? 131071 : 524287);
    if (isSetByteList())
      hashCode = hashCode * 8191 + byteList.hashCode();

    hashCode = hashCode * 8191 + ((isSetShortList()) ? 131071 : 524287);
    if (isSetShortList())
      hashCode = hashCode * 8191 + shortList.hashCode();

    hashCode = hashCode * 8191 + ((isSetIntList()) ? 131071 : 524287);
    if (isSetIntList())
      hashCode = hashCode * 8191 + intList.hashCode();

    hashCode = hashCode * 8191 + ((isSetLongList()) ? 131071 : 524287);
    if (isSetLongList())
      hashCode = hashCode * 8191 + longList.hashCode();

    hashCode = hashCode * 8191 + ((isSetMapString()) ? 131071 : 524287);
    if (isSetMapString())
      hashCode = hashCode * 8191 + mapString.hashCode();

    hashCode = hashCode * 8191 + ((isSetMapAd()) ? 131071 : 524287);
    if (isSetMapAd())
      hashCode = hashCode * 8191 + mapAd.hashCode();

    hashCode = hashCode * 8191 + ((isSetIntPair()) ? 131071 : 524287);
    if (isSetIntPair())
      hashCode = hashCode * 8191 + intPair.hashCode();

    hashCode = hashCode * 8191 + ((isSetSpec()) ? 131071 : 524287);
    if (isSetSpec())
      hashCode = hashCode * 8191 + spec.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Creative other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStandardList()).compareTo(other.isSetStandardList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStandardList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.standardList, other.standardList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByteList()).compareTo(other.isSetByteList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByteList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteList, other.byteList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortList()).compareTo(other.isSetShortList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortList, other.shortList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntList()).compareTo(other.isSetIntList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intList, other.intList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongList()).compareTo(other.isSetLongList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longList, other.longList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapString()).compareTo(other.isSetMapString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapString, other.mapString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapAd()).compareTo(other.isSetMapAd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapAd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapAd, other.mapAd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntPair()).compareTo(other.isSetIntPair());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntPair()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intPair, other.intPair);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpec()).compareTo(other.isSetSpec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spec, other.spec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Creative(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("standardList:");
    if (this.standardList == null) {
      sb.append("null");
    } else {
      sb.append(this.standardList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("byteList:");
    if (this.byteList == null) {
      sb.append("null");
    } else {
      sb.append(this.byteList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shortList:");
    if (this.shortList == null) {
      sb.append("null");
    } else {
      sb.append(this.shortList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("intList:");
    if (this.intList == null) {
      sb.append("null");
    } else {
      sb.append(this.intList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("longList:");
    if (this.longList == null) {
      sb.append("null");
    } else {
      sb.append(this.longList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapString:");
    if (this.mapString == null) {
      sb.append("null");
    } else {
      sb.append(this.mapString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapAd:");
    if (this.mapAd == null) {
      sb.append("null");
    } else {
      sb.append(this.mapAd);
    }
    first = false;
    if (isSetIntPair()) {
      if (!first) sb.append(", ");
      sb.append("intPair:");
      if (this.intPair == null) {
        sb.append("null");
      } else {
        sb.append(this.intPair);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("spec:");
    if (this.spec == null) {
      sb.append("null");
    } else {
      sb.append(this.spec);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (spec != null) {
      spec.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CreativeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CreativeStandardScheme getScheme() {
      return new CreativeStandardScheme();
    }
  }

  private static class CreativeStandardScheme extends org.apache.thrift.scheme.StandardScheme<Creative> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Creative struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STANDARD_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.standardList = new java.util.ArrayList<StandardAd>(_list0.size);
                StandardAd _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new StandardAd();
                  _elem1.read(iprot);
                  struct.standardList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setStandardListIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BYTE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.byteList = new java.util.ArrayList<Byte>(_list3.size);
                byte _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readByte();
                  struct.byteList.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setByteListIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SHORT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.shortList = new java.util.ArrayList<Short>(_list6.size);
                short _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readI16();
                  struct.shortList.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setShortListIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.intList = new java.util.ArrayList<Integer>(_list9.size);
                int _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = iprot.readI32();
                  struct.intList.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setIntListIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LONG_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.longList = new java.util.ArrayList<Long>(_list12.size);
                long _elem13;
                for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                {
                  _elem13 = iprot.readI64();
                  struct.longList.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setLongListIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MAP_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map15 = iprot.readMapBegin();
                struct.mapString = new java.util.HashMap<String,String>(2*_map15.size);
                String _key16;
                String _val17;
                for (int _i18 = 0; _i18 < _map15.size; ++_i18)
                {
                  _key16 = iprot.readString();
                  _val17 = iprot.readString();
                  struct.mapString.put(_key16, _val17);
                }
                iprot.readMapEnd();
              }
              struct.setMapStringIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MAP_AD
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map19 = iprot.readMapBegin();
                struct.mapAd = new java.util.HashMap<String,StandardAd>(2*_map19.size);
                String _key20;
                StandardAd _val21;
                for (int _i22 = 0; _i22 < _map19.size; ++_i22)
                {
                  _key20 = iprot.readString();
                  _val21 = new StandardAd();
                  _val21.read(iprot);
                  struct.mapAd.put(_key20, _val21);
                }
                iprot.readMapEnd();
              }
              struct.setMapAdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // INT_PAIR
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map23 = iprot.readMapBegin();
                struct.intPair = new java.util.HashMap<Integer,String>(2*_map23.size);
                int _key24;
                String _val25;
                for (int _i26 = 0; _i26 < _map23.size; ++_i26)
                {
                  _key24 = iprot.readI32();
                  _val25 = iprot.readString();
                  struct.intPair.put(_key24, _val25);
                }
                iprot.readMapEnd();
              }
              struct.setIntPairIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SPEC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.spec = new StandardAd();
              struct.spec.read(iprot);
              struct.setSpecIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Creative struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.standardList != null) {
        oprot.writeFieldBegin(STANDARD_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.standardList.size()));
          for (StandardAd _iter27 : struct.standardList)
          {
            _iter27.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.byteList != null) {
        oprot.writeFieldBegin(BYTE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, struct.byteList.size()));
          for (byte _iter28 : struct.byteList)
          {
            oprot.writeByte(_iter28);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.shortList != null) {
        oprot.writeFieldBegin(SHORT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.shortList.size()));
          for (short _iter29 : struct.shortList)
          {
            oprot.writeI16(_iter29);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.intList != null) {
        oprot.writeFieldBegin(INT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.intList.size()));
          for (int _iter30 : struct.intList)
          {
            oprot.writeI32(_iter30);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.longList != null) {
        oprot.writeFieldBegin(LONG_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.longList.size()));
          for (long _iter31 : struct.longList)
          {
            oprot.writeI64(_iter31);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.mapString != null) {
        oprot.writeFieldBegin(MAP_STRING_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.mapString.size()));
          for (java.util.Map.Entry<String, String> _iter32 : struct.mapString.entrySet())
          {
            oprot.writeString(_iter32.getKey());
            oprot.writeString(_iter32.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.mapAd != null) {
        oprot.writeFieldBegin(MAP_AD_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.mapAd.size()));
          for (java.util.Map.Entry<String, StandardAd> _iter33 : struct.mapAd.entrySet())
          {
            oprot.writeString(_iter33.getKey());
            _iter33.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.intPair != null) {
        if (struct.isSetIntPair()) {
          oprot.writeFieldBegin(INT_PAIR_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.intPair.size()));
            for (java.util.Map.Entry<Integer, String> _iter34 : struct.intPair.entrySet())
            {
              oprot.writeI32(_iter34.getKey());
              oprot.writeString(_iter34.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.spec != null) {
        oprot.writeFieldBegin(SPEC_FIELD_DESC);
        struct.spec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CreativeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CreativeTupleScheme getScheme() {
      return new CreativeTupleScheme();
    }
  }

  private static class CreativeTupleScheme extends org.apache.thrift.scheme.TupleScheme<Creative> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Creative struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetStandardList()) {
        optionals.set(1);
      }
      if (struct.isSetByteList()) {
        optionals.set(2);
      }
      if (struct.isSetShortList()) {
        optionals.set(3);
      }
      if (struct.isSetIntList()) {
        optionals.set(4);
      }
      if (struct.isSetLongList()) {
        optionals.set(5);
      }
      if (struct.isSetMapString()) {
        optionals.set(6);
      }
      if (struct.isSetMapAd()) {
        optionals.set(7);
      }
      if (struct.isSetIntPair()) {
        optionals.set(8);
      }
      if (struct.isSetSpec()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetStandardList()) {
        {
          oprot.writeI32(struct.standardList.size());
          for (StandardAd _iter35 : struct.standardList)
          {
            _iter35.write(oprot);
          }
        }
      }
      if (struct.isSetByteList()) {
        {
          oprot.writeI32(struct.byteList.size());
          for (byte _iter36 : struct.byteList)
          {
            oprot.writeByte(_iter36);
          }
        }
      }
      if (struct.isSetShortList()) {
        {
          oprot.writeI32(struct.shortList.size());
          for (short _iter37 : struct.shortList)
          {
            oprot.writeI16(_iter37);
          }
        }
      }
      if (struct.isSetIntList()) {
        {
          oprot.writeI32(struct.intList.size());
          for (int _iter38 : struct.intList)
          {
            oprot.writeI32(_iter38);
          }
        }
      }
      if (struct.isSetLongList()) {
        {
          oprot.writeI32(struct.longList.size());
          for (long _iter39 : struct.longList)
          {
            oprot.writeI64(_iter39);
          }
        }
      }
      if (struct.isSetMapString()) {
        {
          oprot.writeI32(struct.mapString.size());
          for (java.util.Map.Entry<String, String> _iter40 : struct.mapString.entrySet())
          {
            oprot.writeString(_iter40.getKey());
            oprot.writeString(_iter40.getValue());
          }
        }
      }
      if (struct.isSetMapAd()) {
        {
          oprot.writeI32(struct.mapAd.size());
          for (java.util.Map.Entry<String, StandardAd> _iter41 : struct.mapAd.entrySet())
          {
            oprot.writeString(_iter41.getKey());
            _iter41.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetIntPair()) {
        {
          oprot.writeI32(struct.intPair.size());
          for (java.util.Map.Entry<Integer, String> _iter42 : struct.intPair.entrySet())
          {
            oprot.writeI32(_iter42.getKey());
            oprot.writeString(_iter42.getValue());
          }
        }
      }
      if (struct.isSetSpec()) {
        struct.spec.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Creative struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list43 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.standardList = new java.util.ArrayList<StandardAd>(_list43.size);
          StandardAd _elem44;
          for (int _i45 = 0; _i45 < _list43.size; ++_i45)
          {
            _elem44 = new StandardAd();
            _elem44.read(iprot);
            struct.standardList.add(_elem44);
          }
        }
        struct.setStandardListIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list46 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.byteList = new java.util.ArrayList<Byte>(_list46.size);
          byte _elem47;
          for (int _i48 = 0; _i48 < _list46.size; ++_i48)
          {
            _elem47 = iprot.readByte();
            struct.byteList.add(_elem47);
          }
        }
        struct.setByteListIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.shortList = new java.util.ArrayList<Short>(_list49.size);
          short _elem50;
          for (int _i51 = 0; _i51 < _list49.size; ++_i51)
          {
            _elem50 = iprot.readI16();
            struct.shortList.add(_elem50);
          }
        }
        struct.setShortListIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list52 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.intList = new java.util.ArrayList<Integer>(_list52.size);
          int _elem53;
          for (int _i54 = 0; _i54 < _list52.size; ++_i54)
          {
            _elem53 = iprot.readI32();
            struct.intList.add(_elem53);
          }
        }
        struct.setIntListIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.longList = new java.util.ArrayList<Long>(_list55.size);
          long _elem56;
          for (int _i57 = 0; _i57 < _list55.size; ++_i57)
          {
            _elem56 = iprot.readI64();
            struct.longList.add(_elem56);
          }
        }
        struct.setLongListIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map58 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.mapString = new java.util.HashMap<String,String>(2*_map58.size);
          String _key59;
          String _val60;
          for (int _i61 = 0; _i61 < _map58.size; ++_i61)
          {
            _key59 = iprot.readString();
            _val60 = iprot.readString();
            struct.mapString.put(_key59, _val60);
          }
        }
        struct.setMapStringIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map62 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.mapAd = new java.util.HashMap<String,StandardAd>(2*_map62.size);
          String _key63;
          StandardAd _val64;
          for (int _i65 = 0; _i65 < _map62.size; ++_i65)
          {
            _key63 = iprot.readString();
            _val64 = new StandardAd();
            _val64.read(iprot);
            struct.mapAd.put(_key63, _val64);
          }
        }
        struct.setMapAdIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map66 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.intPair = new java.util.HashMap<Integer,String>(2*_map66.size);
          int _key67;
          String _val68;
          for (int _i69 = 0; _i69 < _map66.size; ++_i69)
          {
            _key67 = iprot.readI32();
            _val68 = iprot.readString();
            struct.intPair.put(_key67, _val68);
          }
        }
        struct.setIntPairIsSet(true);
      }
      if (incoming.get(9)) {
        struct.spec = new StandardAd();
        struct.spec.read(iprot);
        struct.setSpecIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

