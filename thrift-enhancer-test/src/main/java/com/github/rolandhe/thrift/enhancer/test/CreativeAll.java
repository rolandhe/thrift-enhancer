/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.rolandhe.thrift.enhancer.test;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-09-28")
public class CreativeAll implements org.apache.thrift.TBase<CreativeAll, CreativeAll._Fields>, java.io.Serializable, Cloneable, Comparable<CreativeAll> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreativeAll");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField STANDARD_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("standardList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField BYTE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("byteList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SHORT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("shortList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField INT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("intList", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField LONG_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("longList", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField MAP_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("mapString", org.apache.thrift.protocol.TType.MAP, (short)7);
  private static final org.apache.thrift.protocol.TField MAP_AD_FIELD_DESC = new org.apache.thrift.protocol.TField("mapAd", org.apache.thrift.protocol.TType.MAP, (short)8);
  private static final org.apache.thrift.protocol.TField INT_PAIR_FIELD_DESC = new org.apache.thrift.protocol.TField("intPair", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("spec", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.BYTE, (short)11);
  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.I16, (short)12);
  private static final org.apache.thrift.protocol.TField SHORTID_FIELD_DESC = new org.apache.thrift.protocol.TField("shortid", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("seq", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField IS_START_FIELD_DESC = new org.apache.thrift.protocol.TField("isStart", org.apache.thrift.protocol.TType.BOOL, (short)17);
  private static final org.apache.thrift.protocol.TField PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("percent", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField AD_STYLE_FIELD_DESC = new org.apache.thrift.protocol.TField("adStyle", org.apache.thrift.protocol.TType.I32, (short)19);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CreativeAllStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CreativeAllTupleSchemeFactory();

  public long id; // required
  public java.util.List<StandardAd> standardList; // required
  public java.util.List<Byte> byteList; // required
  public java.util.List<Short> shortList; // required
  public java.util.List<Integer> intList; // required
  public java.util.List<Long> longList; // required
  public java.util.Map<String,String> mapString; // required
  public java.util.Map<String,StandardAd> mapAd; // required
  public java.util.Map<Integer,String> intPair; // optional
  public StandardAd spec; // required
  public byte type; // required
  public short category; // required
  public int shortid; // required
  public long seq; // required
  public String name; // required
  public java.nio.ByteBuffer content; // required
  public boolean isStart; // required
  public double percent; // required
  /**
   *
   * @see AdStyle
   */
  public AdStyle adStyle; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    STANDARD_LIST((short)2, "standardList"),
    BYTE_LIST((short)3, "byteList"),
    SHORT_LIST((short)4, "shortList"),
    INT_LIST((short)5, "intList"),
    LONG_LIST((short)6, "longList"),
    MAP_STRING((short)7, "mapString"),
    MAP_AD((short)8, "mapAd"),
    INT_PAIR((short)9, "intPair"),
    SPEC((short)10, "spec"),
    TYPE((short)11, "type"),
    CATEGORY((short)12, "category"),
    SHORTID((short)13, "shortid"),
    SEQ((short)14, "seq"),
    NAME((short)15, "name"),
    CONTENT((short)16, "content"),
    IS_START((short)17, "isStart"),
    PERCENT((short)18, "percent"),
    /**
     *
     * @see AdStyle
     */
    AD_STYLE((short)19, "adStyle");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // STANDARD_LIST
          return STANDARD_LIST;
        case 3: // BYTE_LIST
          return BYTE_LIST;
        case 4: // SHORT_LIST
          return SHORT_LIST;
        case 5: // INT_LIST
          return INT_LIST;
        case 6: // LONG_LIST
          return LONG_LIST;
        case 7: // MAP_STRING
          return MAP_STRING;
        case 8: // MAP_AD
          return MAP_AD;
        case 9: // INT_PAIR
          return INT_PAIR;
        case 10: // SPEC
          return SPEC;
        case 11: // TYPE
          return TYPE;
        case 12: // CATEGORY
          return CATEGORY;
        case 13: // SHORTID
          return SHORTID;
        case 14: // SEQ
          return SEQ;
        case 15: // NAME
          return NAME;
        case 16: // CONTENT
          return CONTENT;
        case 17: // IS_START
          return IS_START;
        case 18: // PERCENT
          return PERCENT;
        case 19: // AD_STYLE
          return AD_STYLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TYPE_ISSET_ID = 1;
  private static final int __CATEGORY_ISSET_ID = 2;
  private static final int __SHORTID_ISSET_ID = 3;
  private static final int __SEQ_ISSET_ID = 4;
  private static final int __ISSTART_ISSET_ID = 5;
  private static final int __PERCENT_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.INT_PAIR};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STANDARD_LIST, new org.apache.thrift.meta_data.FieldMetaData("standardList", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StandardAd.class))));
    tmpMap.put(_Fields.BYTE_LIST, new org.apache.thrift.meta_data.FieldMetaData("byteList", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.SHORT_LIST, new org.apache.thrift.meta_data.FieldMetaData("shortList", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.INT_LIST, new org.apache.thrift.meta_data.FieldMetaData("intList", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LONG_LIST, new org.apache.thrift.meta_data.FieldMetaData("longList", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.MAP_STRING, new org.apache.thrift.meta_data.FieldMetaData("mapString", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MAP_AD, new org.apache.thrift.meta_data.FieldMetaData("mapAd", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StandardAd.class))));
    tmpMap.put(_Fields.INT_PAIR, new org.apache.thrift.meta_data.FieldMetaData("intPair", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32),
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SPEC, new org.apache.thrift.meta_data.FieldMetaData("spec", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StandardAd.class)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SHORTID, new org.apache.thrift.meta_data.FieldMetaData("shortid", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEQ, new org.apache.thrift.meta_data.FieldMetaData("seq", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.IS_START, new org.apache.thrift.meta_data.FieldMetaData("isStart", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PERCENT, new org.apache.thrift.meta_data.FieldMetaData("percent", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AD_STYLE, new org.apache.thrift.meta_data.FieldMetaData("adStyle", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AdStyle.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreativeAll.class, metaDataMap);
  }

  public CreativeAll() {
  }

  public CreativeAll(
    long id,
    java.util.List<StandardAd> standardList,
    java.util.List<Byte> byteList,
    java.util.List<Short> shortList,
    java.util.List<Integer> intList,
    java.util.List<Long> longList,
    java.util.Map<String,String> mapString,
    java.util.Map<String,StandardAd> mapAd,
    StandardAd spec,
    byte type,
    short category,
    int shortid,
    long seq,
    String name,
    java.nio.ByteBuffer content,
    boolean isStart,
    double percent,
    AdStyle adStyle)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.standardList = standardList;
    this.byteList = byteList;
    this.shortList = shortList;
    this.intList = intList;
    this.longList = longList;
    this.mapString = mapString;
    this.mapAd = mapAd;
    this.spec = spec;
    this.type = type;
    setTypeIsSet(true);
    this.category = category;
    setCategoryIsSet(true);
    this.shortid = shortid;
    setShortidIsSet(true);
    this.seq = seq;
    setSeqIsSet(true);
    this.name = name;
    this.content = org.apache.thrift.TBaseHelper.copyBinary(content);
    this.isStart = isStart;
    setIsStartIsSet(true);
    this.percent = percent;
    setPercentIsSet(true);
    this.adStyle = adStyle;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CreativeAll(CreativeAll other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetStandardList()) {
      java.util.List<StandardAd> __this__standardList = new java.util.ArrayList<StandardAd>(other.standardList.size());
      for (StandardAd other_element : other.standardList) {
        __this__standardList.add(new StandardAd(other_element));
      }
      this.standardList = __this__standardList;
    }
    if (other.isSetByteList()) {
      java.util.List<Byte> __this__byteList = new java.util.ArrayList<Byte>(other.byteList);
      this.byteList = __this__byteList;
    }
    if (other.isSetShortList()) {
      java.util.List<Short> __this__shortList = new java.util.ArrayList<Short>(other.shortList);
      this.shortList = __this__shortList;
    }
    if (other.isSetIntList()) {
      java.util.List<Integer> __this__intList = new java.util.ArrayList<Integer>(other.intList);
      this.intList = __this__intList;
    }
    if (other.isSetLongList()) {
      java.util.List<Long> __this__longList = new java.util.ArrayList<Long>(other.longList);
      this.longList = __this__longList;
    }
    if (other.isSetMapString()) {
      java.util.Map<String,String> __this__mapString = new java.util.HashMap<String,String>(other.mapString);
      this.mapString = __this__mapString;
    }
    if (other.isSetMapAd()) {
      java.util.Map<String,StandardAd> __this__mapAd = new java.util.HashMap<String,StandardAd>(other.mapAd.size());
      for (java.util.Map.Entry<String, StandardAd> other_element : other.mapAd.entrySet()) {

        String other_element_key = other_element.getKey();
        StandardAd other_element_value = other_element.getValue();

        String __this__mapAd_copy_key = other_element_key;

        StandardAd __this__mapAd_copy_value = new StandardAd(other_element_value);

        __this__mapAd.put(__this__mapAd_copy_key, __this__mapAd_copy_value);
      }
      this.mapAd = __this__mapAd;
    }
    if (other.isSetIntPair()) {
      java.util.Map<Integer,String> __this__intPair = new java.util.HashMap<Integer,String>(other.intPair);
      this.intPair = __this__intPair;
    }
    if (other.isSetSpec()) {
      this.spec = new StandardAd(other.spec);
    }
    this.type = other.type;
    this.category = other.category;
    this.shortid = other.shortid;
    this.seq = other.seq;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetContent()) {
      this.content = org.apache.thrift.TBaseHelper.copyBinary(other.content);
    }
    this.isStart = other.isStart;
    this.percent = other.percent;
    if (other.isSetAdStyle()) {
      this.adStyle = other.adStyle;
    }
  }

  public CreativeAll deepCopy() {
    return new CreativeAll(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.standardList = null;
    this.byteList = null;
    this.shortList = null;
    this.intList = null;
    this.longList = null;
    this.mapString = null;
    this.mapAd = null;
    this.intPair = null;
    this.spec = null;
    setTypeIsSet(false);
    this.type = 0;
    setCategoryIsSet(false);
    this.category = 0;
    setShortidIsSet(false);
    this.shortid = 0;
    setSeqIsSet(false);
    this.seq = 0;
    this.name = null;
    this.content = null;
    setIsStartIsSet(false);
    this.isStart = false;
    setPercentIsSet(false);
    this.percent = 0.0;
    this.adStyle = null;
  }

  public long getId() {
    return this.id;
  }

  public CreativeAll setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getStandardListSize() {
    return (this.standardList == null) ? 0 : this.standardList.size();
  }

  public java.util.Iterator<StandardAd> getStandardListIterator() {
    return (this.standardList == null) ? null : this.standardList.iterator();
  }

  public void addToStandardList(StandardAd elem) {
    if (this.standardList == null) {
      this.standardList = new java.util.ArrayList<StandardAd>();
    }
    this.standardList.add(elem);
  }

  public java.util.List<StandardAd> getStandardList() {
    return this.standardList;
  }

  public CreativeAll setStandardList(java.util.List<StandardAd> standardList) {
    this.standardList = standardList;
    return this;
  }

  public void unsetStandardList() {
    this.standardList = null;
  }

  /** Returns true if field standardList is set (has been assigned a value) and false otherwise */
  public boolean isSetStandardList() {
    return this.standardList != null;
  }

  public void setStandardListIsSet(boolean value) {
    if (!value) {
      this.standardList = null;
    }
  }

  public int getByteListSize() {
    return (this.byteList == null) ? 0 : this.byteList.size();
  }

  public java.util.Iterator<Byte> getByteListIterator() {
    return (this.byteList == null) ? null : this.byteList.iterator();
  }

  public void addToByteList(byte elem) {
    if (this.byteList == null) {
      this.byteList = new java.util.ArrayList<Byte>();
    }
    this.byteList.add(elem);
  }

  public java.util.List<Byte> getByteList() {
    return this.byteList;
  }

  public CreativeAll setByteList(java.util.List<Byte> byteList) {
    this.byteList = byteList;
    return this;
  }

  public void unsetByteList() {
    this.byteList = null;
  }

  /** Returns true if field byteList is set (has been assigned a value) and false otherwise */
  public boolean isSetByteList() {
    return this.byteList != null;
  }

  public void setByteListIsSet(boolean value) {
    if (!value) {
      this.byteList = null;
    }
  }

  public int getShortListSize() {
    return (this.shortList == null) ? 0 : this.shortList.size();
  }

  public java.util.Iterator<Short> getShortListIterator() {
    return (this.shortList == null) ? null : this.shortList.iterator();
  }

  public void addToShortList(short elem) {
    if (this.shortList == null) {
      this.shortList = new java.util.ArrayList<Short>();
    }
    this.shortList.add(elem);
  }

  public java.util.List<Short> getShortList() {
    return this.shortList;
  }

  public CreativeAll setShortList(java.util.List<Short> shortList) {
    this.shortList = shortList;
    return this;
  }

  public void unsetShortList() {
    this.shortList = null;
  }

  /** Returns true if field shortList is set (has been assigned a value) and false otherwise */
  public boolean isSetShortList() {
    return this.shortList != null;
  }

  public void setShortListIsSet(boolean value) {
    if (!value) {
      this.shortList = null;
    }
  }

  public int getIntListSize() {
    return (this.intList == null) ? 0 : this.intList.size();
  }

  public java.util.Iterator<Integer> getIntListIterator() {
    return (this.intList == null) ? null : this.intList.iterator();
  }

  public void addToIntList(int elem) {
    if (this.intList == null) {
      this.intList = new java.util.ArrayList<Integer>();
    }
    this.intList.add(elem);
  }

  public java.util.List<Integer> getIntList() {
    return this.intList;
  }

  public CreativeAll setIntList(java.util.List<Integer> intList) {
    this.intList = intList;
    return this;
  }

  public void unsetIntList() {
    this.intList = null;
  }

  /** Returns true if field intList is set (has been assigned a value) and false otherwise */
  public boolean isSetIntList() {
    return this.intList != null;
  }

  public void setIntListIsSet(boolean value) {
    if (!value) {
      this.intList = null;
    }
  }

  public int getLongListSize() {
    return (this.longList == null) ? 0 : this.longList.size();
  }

  public java.util.Iterator<Long> getLongListIterator() {
    return (this.longList == null) ? null : this.longList.iterator();
  }

  public void addToLongList(long elem) {
    if (this.longList == null) {
      this.longList = new java.util.ArrayList<Long>();
    }
    this.longList.add(elem);
  }

  public java.util.List<Long> getLongList() {
    return this.longList;
  }

  public CreativeAll setLongList(java.util.List<Long> longList) {
    this.longList = longList;
    return this;
  }

  public void unsetLongList() {
    this.longList = null;
  }

  /** Returns true if field longList is set (has been assigned a value) and false otherwise */
  public boolean isSetLongList() {
    return this.longList != null;
  }

  public void setLongListIsSet(boolean value) {
    if (!value) {
      this.longList = null;
    }
  }

  public int getMapStringSize() {
    return (this.mapString == null) ? 0 : this.mapString.size();
  }

  public void putToMapString(String key, String val) {
    if (this.mapString == null) {
      this.mapString = new java.util.HashMap<String,String>();
    }
    this.mapString.put(key, val);
  }

  public java.util.Map<String,String> getMapString() {
    return this.mapString;
  }

  public CreativeAll setMapString(java.util.Map<String,String> mapString) {
    this.mapString = mapString;
    return this;
  }

  public void unsetMapString() {
    this.mapString = null;
  }

  /** Returns true if field mapString is set (has been assigned a value) and false otherwise */
  public boolean isSetMapString() {
    return this.mapString != null;
  }

  public void setMapStringIsSet(boolean value) {
    if (!value) {
      this.mapString = null;
    }
  }

  public int getMapAdSize() {
    return (this.mapAd == null) ? 0 : this.mapAd.size();
  }

  public void putToMapAd(String key, StandardAd val) {
    if (this.mapAd == null) {
      this.mapAd = new java.util.HashMap<String,StandardAd>();
    }
    this.mapAd.put(key, val);
  }

  public java.util.Map<String,StandardAd> getMapAd() {
    return this.mapAd;
  }

  public CreativeAll setMapAd(java.util.Map<String,StandardAd> mapAd) {
    this.mapAd = mapAd;
    return this;
  }

  public void unsetMapAd() {
    this.mapAd = null;
  }

  /** Returns true if field mapAd is set (has been assigned a value) and false otherwise */
  public boolean isSetMapAd() {
    return this.mapAd != null;
  }

  public void setMapAdIsSet(boolean value) {
    if (!value) {
      this.mapAd = null;
    }
  }

  public int getIntPairSize() {
    return (this.intPair == null) ? 0 : this.intPair.size();
  }

  public void putToIntPair(int key, String val) {
    if (this.intPair == null) {
      this.intPair = new java.util.HashMap<Integer,String>();
    }
    this.intPair.put(key, val);
  }

  public java.util.Map<Integer,String> getIntPair() {
    return this.intPair;
  }

  public CreativeAll setIntPair(java.util.Map<Integer,String> intPair) {
    this.intPair = intPair;
    return this;
  }

  public void unsetIntPair() {
    this.intPair = null;
  }

  /** Returns true if field intPair is set (has been assigned a value) and false otherwise */
  public boolean isSetIntPair() {
    return this.intPair != null;
  }

  public void setIntPairIsSet(boolean value) {
    if (!value) {
      this.intPair = null;
    }
  }

  public StandardAd getSpec() {
    return this.spec;
  }

  public CreativeAll setSpec(StandardAd spec) {
    this.spec = spec;
    return this;
  }

  public void unsetSpec() {
    this.spec = null;
  }

  /** Returns true if field spec is set (has been assigned a value) and false otherwise */
  public boolean isSetSpec() {
    return this.spec != null;
  }

  public void setSpecIsSet(boolean value) {
    if (!value) {
      this.spec = null;
    }
  }

  public byte getType() {
    return this.type;
  }

  public CreativeAll setType(byte type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public short getCategory() {
    return this.category;
  }

  public CreativeAll setCategory(short category) {
    this.category = category;
    setCategoryIsSet(true);
    return this;
  }

  public void unsetCategory() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CATEGORY_ISSET_ID);
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CATEGORY_ISSET_ID);
  }

  public void setCategoryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CATEGORY_ISSET_ID, value);
  }

  public int getShortid() {
    return this.shortid;
  }

  public CreativeAll setShortid(int shortid) {
    this.shortid = shortid;
    setShortidIsSet(true);
    return this;
  }

  public void unsetShortid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHORTID_ISSET_ID);
  }

  /** Returns true if field shortid is set (has been assigned a value) and false otherwise */
  public boolean isSetShortid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHORTID_ISSET_ID);
  }

  public void setShortidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHORTID_ISSET_ID, value);
  }

  public long getSeq() {
    return this.seq;
  }

  public CreativeAll setSeq(long seq) {
    this.seq = seq;
    setSeqIsSet(true);
    return this;
  }

  public void unsetSeq() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEQ_ISSET_ID);
  }

  /** Returns true if field seq is set (has been assigned a value) and false otherwise */
  public boolean isSetSeq() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEQ_ISSET_ID);
  }

  public void setSeqIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEQ_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public CreativeAll setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public byte[] getContent() {
    setContent(org.apache.thrift.TBaseHelper.rightSize(content));
    return content == null ? null : content.array();
  }

  public java.nio.ByteBuffer bufferForContent() {
    return org.apache.thrift.TBaseHelper.copyBinary(content);
  }

  public CreativeAll setContent(byte[] content) {
    this.content = content == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(content.clone());
    return this;
  }

  public CreativeAll setContent(java.nio.ByteBuffer content) {
    this.content = org.apache.thrift.TBaseHelper.copyBinary(content);
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public boolean isIsStart() {
    return this.isStart;
  }

  public CreativeAll setIsStart(boolean isStart) {
    this.isStart = isStart;
    setIsStartIsSet(true);
    return this;
  }

  public void unsetIsStart() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSTART_ISSET_ID);
  }

  /** Returns true if field isStart is set (has been assigned a value) and false otherwise */
  public boolean isSetIsStart() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSTART_ISSET_ID);
  }

  public void setIsStartIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSTART_ISSET_ID, value);
  }

  public double getPercent() {
    return this.percent;
  }

  public CreativeAll setPercent(double percent) {
    this.percent = percent;
    setPercentIsSet(true);
    return this;
  }

  public void unsetPercent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PERCENT_ISSET_ID);
  }

  /** Returns true if field percent is set (has been assigned a value) and false otherwise */
  public boolean isSetPercent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PERCENT_ISSET_ID);
  }

  public void setPercentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PERCENT_ISSET_ID, value);
  }

  /**
   *
   * @see AdStyle
   */
  public AdStyle getAdStyle() {
    return this.adStyle;
  }

  /**
   *
   * @see AdStyle
   */
  public CreativeAll setAdStyle(AdStyle adStyle) {
    this.adStyle = adStyle;
    return this;
  }

  public void unsetAdStyle() {
    this.adStyle = null;
  }

  /** Returns true if field adStyle is set (has been assigned a value) and false otherwise */
  public boolean isSetAdStyle() {
    return this.adStyle != null;
  }

  public void setAdStyleIsSet(boolean value) {
    if (!value) {
      this.adStyle = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case STANDARD_LIST:
      if (value == null) {
        unsetStandardList();
      } else {
        setStandardList((java.util.List<StandardAd>)value);
      }
      break;

    case BYTE_LIST:
      if (value == null) {
        unsetByteList();
      } else {
        setByteList((java.util.List<Byte>)value);
      }
      break;

    case SHORT_LIST:
      if (value == null) {
        unsetShortList();
      } else {
        setShortList((java.util.List<Short>)value);
      }
      break;

    case INT_LIST:
      if (value == null) {
        unsetIntList();
      } else {
        setIntList((java.util.List<Integer>)value);
      }
      break;

    case LONG_LIST:
      if (value == null) {
        unsetLongList();
      } else {
        setLongList((java.util.List<Long>)value);
      }
      break;

    case MAP_STRING:
      if (value == null) {
        unsetMapString();
      } else {
        setMapString((java.util.Map<String,String>)value);
      }
      break;

    case MAP_AD:
      if (value == null) {
        unsetMapAd();
      } else {
        setMapAd((java.util.Map<String,StandardAd>)value);
      }
      break;

    case INT_PAIR:
      if (value == null) {
        unsetIntPair();
      } else {
        setIntPair((java.util.Map<Integer,String>)value);
      }
      break;

    case SPEC:
      if (value == null) {
        unsetSpec();
      } else {
        setSpec((StandardAd)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Byte)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((Short)value);
      }
      break;

    case SHORTID:
      if (value == null) {
        unsetShortid();
      } else {
        setShortid((Integer)value);
      }
      break;

    case SEQ:
      if (value == null) {
        unsetSeq();
      } else {
        setSeq((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        if (value instanceof byte[]) {
          setContent((byte[])value);
        } else {
          setContent((java.nio.ByteBuffer)value);
        }
      }
      break;

    case IS_START:
      if (value == null) {
        unsetIsStart();
      } else {
        setIsStart((Boolean)value);
      }
      break;

    case PERCENT:
      if (value == null) {
        unsetPercent();
      } else {
        setPercent((Double)value);
      }
      break;

    case AD_STYLE:
      if (value == null) {
        unsetAdStyle();
      } else {
        setAdStyle((AdStyle)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case STANDARD_LIST:
      return getStandardList();

    case BYTE_LIST:
      return getByteList();

    case SHORT_LIST:
      return getShortList();

    case INT_LIST:
      return getIntList();

    case LONG_LIST:
      return getLongList();

    case MAP_STRING:
      return getMapString();

    case MAP_AD:
      return getMapAd();

    case INT_PAIR:
      return getIntPair();

    case SPEC:
      return getSpec();

    case TYPE:
      return getType();

    case CATEGORY:
      return getCategory();

    case SHORTID:
      return getShortid();

    case SEQ:
      return getSeq();

    case NAME:
      return getName();

    case CONTENT:
      return getContent();

    case IS_START:
      return isIsStart();

    case PERCENT:
      return getPercent();

    case AD_STYLE:
      return getAdStyle();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case STANDARD_LIST:
      return isSetStandardList();
    case BYTE_LIST:
      return isSetByteList();
    case SHORT_LIST:
      return isSetShortList();
    case INT_LIST:
      return isSetIntList();
    case LONG_LIST:
      return isSetLongList();
    case MAP_STRING:
      return isSetMapString();
    case MAP_AD:
      return isSetMapAd();
    case INT_PAIR:
      return isSetIntPair();
    case SPEC:
      return isSetSpec();
    case TYPE:
      return isSetType();
    case CATEGORY:
      return isSetCategory();
    case SHORTID:
      return isSetShortid();
    case SEQ:
      return isSetSeq();
    case NAME:
      return isSetName();
    case CONTENT:
      return isSetContent();
    case IS_START:
      return isSetIsStart();
    case PERCENT:
      return isSetPercent();
    case AD_STYLE:
      return isSetAdStyle();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CreativeAll)
      return this.equals((CreativeAll)that);
    return false;
  }

  public boolean equals(CreativeAll that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_standardList = true && this.isSetStandardList();
    boolean that_present_standardList = true && that.isSetStandardList();
    if (this_present_standardList || that_present_standardList) {
      if (!(this_present_standardList && that_present_standardList))
        return false;
      if (!this.standardList.equals(that.standardList))
        return false;
    }

    boolean this_present_byteList = true && this.isSetByteList();
    boolean that_present_byteList = true && that.isSetByteList();
    if (this_present_byteList || that_present_byteList) {
      if (!(this_present_byteList && that_present_byteList))
        return false;
      if (!this.byteList.equals(that.byteList))
        return false;
    }

    boolean this_present_shortList = true && this.isSetShortList();
    boolean that_present_shortList = true && that.isSetShortList();
    if (this_present_shortList || that_present_shortList) {
      if (!(this_present_shortList && that_present_shortList))
        return false;
      if (!this.shortList.equals(that.shortList))
        return false;
    }

    boolean this_present_intList = true && this.isSetIntList();
    boolean that_present_intList = true && that.isSetIntList();
    if (this_present_intList || that_present_intList) {
      if (!(this_present_intList && that_present_intList))
        return false;
      if (!this.intList.equals(that.intList))
        return false;
    }

    boolean this_present_longList = true && this.isSetLongList();
    boolean that_present_longList = true && that.isSetLongList();
    if (this_present_longList || that_present_longList) {
      if (!(this_present_longList && that_present_longList))
        return false;
      if (!this.longList.equals(that.longList))
        return false;
    }

    boolean this_present_mapString = true && this.isSetMapString();
    boolean that_present_mapString = true && that.isSetMapString();
    if (this_present_mapString || that_present_mapString) {
      if (!(this_present_mapString && that_present_mapString))
        return false;
      if (!this.mapString.equals(that.mapString))
        return false;
    }

    boolean this_present_mapAd = true && this.isSetMapAd();
    boolean that_present_mapAd = true && that.isSetMapAd();
    if (this_present_mapAd || that_present_mapAd) {
      if (!(this_present_mapAd && that_present_mapAd))
        return false;
      if (!this.mapAd.equals(that.mapAd))
        return false;
    }

    boolean this_present_intPair = true && this.isSetIntPair();
    boolean that_present_intPair = true && that.isSetIntPair();
    if (this_present_intPair || that_present_intPair) {
      if (!(this_present_intPair && that_present_intPair))
        return false;
      if (!this.intPair.equals(that.intPair))
        return false;
    }

    boolean this_present_spec = true && this.isSetSpec();
    boolean that_present_spec = true && that.isSetSpec();
    if (this_present_spec || that_present_spec) {
      if (!(this_present_spec && that_present_spec))
        return false;
      if (!this.spec.equals(that.spec))
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_category = true;
    boolean that_present_category = true;
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (this.category != that.category)
        return false;
    }

    boolean this_present_shortid = true;
    boolean that_present_shortid = true;
    if (this_present_shortid || that_present_shortid) {
      if (!(this_present_shortid && that_present_shortid))
        return false;
      if (this.shortid != that.shortid)
        return false;
    }

    boolean this_present_seq = true;
    boolean that_present_seq = true;
    if (this_present_seq || that_present_seq) {
      if (!(this_present_seq && that_present_seq))
        return false;
      if (this.seq != that.seq)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_isStart = true;
    boolean that_present_isStart = true;
    if (this_present_isStart || that_present_isStart) {
      if (!(this_present_isStart && that_present_isStart))
        return false;
      if (this.isStart != that.isStart)
        return false;
    }

    boolean this_present_percent = true;
    boolean that_present_percent = true;
    if (this_present_percent || that_present_percent) {
      if (!(this_present_percent && that_present_percent))
        return false;
      if (this.percent != that.percent)
        return false;
    }

    boolean this_present_adStyle = true && this.isSetAdStyle();
    boolean that_present_adStyle = true && that.isSetAdStyle();
    if (this_present_adStyle || that_present_adStyle) {
      if (!(this_present_adStyle && that_present_adStyle))
        return false;
      if (!this.adStyle.equals(that.adStyle))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetStandardList()) ? 131071 : 524287);
    if (isSetStandardList())
      hashCode = hashCode * 8191 + standardList.hashCode();

    hashCode = hashCode * 8191 + ((isSetByteList()) ? 131071 : 524287);
    if (isSetByteList())
      hashCode = hashCode * 8191 + byteList.hashCode();

    hashCode = hashCode * 8191 + ((isSetShortList()) ? 131071 : 524287);
    if (isSetShortList())
      hashCode = hashCode * 8191 + shortList.hashCode();

    hashCode = hashCode * 8191 + ((isSetIntList()) ? 131071 : 524287);
    if (isSetIntList())
      hashCode = hashCode * 8191 + intList.hashCode();

    hashCode = hashCode * 8191 + ((isSetLongList()) ? 131071 : 524287);
    if (isSetLongList())
      hashCode = hashCode * 8191 + longList.hashCode();

    hashCode = hashCode * 8191 + ((isSetMapString()) ? 131071 : 524287);
    if (isSetMapString())
      hashCode = hashCode * 8191 + mapString.hashCode();

    hashCode = hashCode * 8191 + ((isSetMapAd()) ? 131071 : 524287);
    if (isSetMapAd())
      hashCode = hashCode * 8191 + mapAd.hashCode();

    hashCode = hashCode * 8191 + ((isSetIntPair()) ? 131071 : 524287);
    if (isSetIntPair())
      hashCode = hashCode * 8191 + intPair.hashCode();

    hashCode = hashCode * 8191 + ((isSetSpec()) ? 131071 : 524287);
    if (isSetSpec())
      hashCode = hashCode * 8191 + spec.hashCode();

    hashCode = hashCode * 8191 + (int) (type);

    hashCode = hashCode * 8191 + category;

    hashCode = hashCode * 8191 + shortid;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(seq);

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
    if (isSetContent())
      hashCode = hashCode * 8191 + content.hashCode();

    hashCode = hashCode * 8191 + ((isStart) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(percent);

    hashCode = hashCode * 8191 + ((isSetAdStyle()) ? 131071 : 524287);
    if (isSetAdStyle())
      hashCode = hashCode * 8191 + adStyle.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(CreativeAll other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStandardList()).compareTo(other.isSetStandardList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStandardList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.standardList, other.standardList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByteList()).compareTo(other.isSetByteList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByteList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteList, other.byteList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortList()).compareTo(other.isSetShortList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortList, other.shortList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntList()).compareTo(other.isSetIntList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intList, other.intList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongList()).compareTo(other.isSetLongList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longList, other.longList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapString()).compareTo(other.isSetMapString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapString, other.mapString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapAd()).compareTo(other.isSetMapAd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapAd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapAd, other.mapAd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntPair()).compareTo(other.isSetIntPair());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntPair()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intPair, other.intPair);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpec()).compareTo(other.isSetSpec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spec, other.spec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortid()).compareTo(other.isSetShortid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortid, other.shortid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeq()).compareTo(other.isSetSeq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seq, other.seq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsStart()).compareTo(other.isSetIsStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isStart, other.isStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPercent()).compareTo(other.isSetPercent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPercent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.percent, other.percent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdStyle()).compareTo(other.isSetAdStyle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdStyle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adStyle, other.adStyle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CreativeAll(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("standardList:");
    if (this.standardList == null) {
      sb.append("null");
    } else {
      sb.append(this.standardList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("byteList:");
    if (this.byteList == null) {
      sb.append("null");
    } else {
      sb.append(this.byteList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shortList:");
    if (this.shortList == null) {
      sb.append("null");
    } else {
      sb.append(this.shortList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("intList:");
    if (this.intList == null) {
      sb.append("null");
    } else {
      sb.append(this.intList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("longList:");
    if (this.longList == null) {
      sb.append("null");
    } else {
      sb.append(this.longList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapString:");
    if (this.mapString == null) {
      sb.append("null");
    } else {
      sb.append(this.mapString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapAd:");
    if (this.mapAd == null) {
      sb.append("null");
    } else {
      sb.append(this.mapAd);
    }
    first = false;
    if (isSetIntPair()) {
      if (!first) sb.append(", ");
      sb.append("intPair:");
      if (this.intPair == null) {
        sb.append("null");
      } else {
        sb.append(this.intPair);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("spec:");
    if (this.spec == null) {
      sb.append("null");
    } else {
      sb.append(this.spec);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("category:");
    sb.append(this.category);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shortid:");
    sb.append(this.shortid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("seq:");
    sb.append(this.seq);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.content, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isStart:");
    sb.append(this.isStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("percent:");
    sb.append(this.percent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("adStyle:");
    if (this.adStyle == null) {
      sb.append("null");
    } else {
      sb.append(this.adStyle);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (spec != null) {
      spec.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CreativeAllStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CreativeAllStandardScheme getScheme() {
      return new CreativeAllStandardScheme();
    }
  }

  private static class CreativeAllStandardScheme extends org.apache.thrift.scheme.StandardScheme<CreativeAll> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CreativeAll struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STANDARD_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list70 = iprot.readListBegin();
                struct.standardList = new java.util.ArrayList<StandardAd>(_list70.size);
                StandardAd _elem71;
                for (int _i72 = 0; _i72 < _list70.size; ++_i72)
                {
                  _elem71 = new StandardAd();
                  _elem71.read(iprot);
                  struct.standardList.add(_elem71);
                }
                iprot.readListEnd();
              }
              struct.setStandardListIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BYTE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list73 = iprot.readListBegin();
                struct.byteList = new java.util.ArrayList<Byte>(_list73.size);
                byte _elem74;
                for (int _i75 = 0; _i75 < _list73.size; ++_i75)
                {
                  _elem74 = iprot.readByte();
                  struct.byteList.add(_elem74);
                }
                iprot.readListEnd();
              }
              struct.setByteListIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SHORT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list76 = iprot.readListBegin();
                struct.shortList = new java.util.ArrayList<Short>(_list76.size);
                short _elem77;
                for (int _i78 = 0; _i78 < _list76.size; ++_i78)
                {
                  _elem77 = iprot.readI16();
                  struct.shortList.add(_elem77);
                }
                iprot.readListEnd();
              }
              struct.setShortListIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list79 = iprot.readListBegin();
                struct.intList = new java.util.ArrayList<Integer>(_list79.size);
                int _elem80;
                for (int _i81 = 0; _i81 < _list79.size; ++_i81)
                {
                  _elem80 = iprot.readI32();
                  struct.intList.add(_elem80);
                }
                iprot.readListEnd();
              }
              struct.setIntListIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LONG_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list82 = iprot.readListBegin();
                struct.longList = new java.util.ArrayList<Long>(_list82.size);
                long _elem83;
                for (int _i84 = 0; _i84 < _list82.size; ++_i84)
                {
                  _elem83 = iprot.readI64();
                  struct.longList.add(_elem83);
                }
                iprot.readListEnd();
              }
              struct.setLongListIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MAP_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map85 = iprot.readMapBegin();
                struct.mapString = new java.util.HashMap<String,String>(2*_map85.size);
                String _key86;
                String _val87;
                for (int _i88 = 0; _i88 < _map85.size; ++_i88)
                {
                  _key86 = iprot.readString();
                  _val87 = iprot.readString();
                  struct.mapString.put(_key86, _val87);
                }
                iprot.readMapEnd();
              }
              struct.setMapStringIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MAP_AD
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map89 = iprot.readMapBegin();
                struct.mapAd = new java.util.HashMap<String,StandardAd>(2*_map89.size);
                String _key90;
                StandardAd _val91;
                for (int _i92 = 0; _i92 < _map89.size; ++_i92)
                {
                  _key90 = iprot.readString();
                  _val91 = new StandardAd();
                  _val91.read(iprot);
                  struct.mapAd.put(_key90, _val91);
                }
                iprot.readMapEnd();
              }
              struct.setMapAdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // INT_PAIR
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map93 = iprot.readMapBegin();
                struct.intPair = new java.util.HashMap<Integer,String>(2*_map93.size);
                int _key94;
                String _val95;
                for (int _i96 = 0; _i96 < _map93.size; ++_i96)
                {
                  _key94 = iprot.readI32();
                  _val95 = iprot.readString();
                  struct.intPair.put(_key94, _val95);
                }
                iprot.readMapEnd();
              }
              struct.setIntPairIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SPEC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.spec = new StandardAd();
              struct.spec.read(iprot);
              struct.setSpecIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.type = iprot.readByte();
              struct.setTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.category = iprot.readI16();
              struct.setCategoryIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SHORTID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.shortid = iprot.readI32();
              struct.setShortidIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.seq = iprot.readI64();
              struct.setSeqIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readBinary();
              struct.setContentIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // IS_START
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isStart = iprot.readBool();
              struct.setIsStartIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.percent = iprot.readDouble();
              struct.setPercentIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // AD_STYLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.adStyle = com.github.rolandhe.thrift.enhancer.test.AdStyle.findByValue(iprot.readI32());
              struct.setAdStyleIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CreativeAll struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.standardList != null) {
        oprot.writeFieldBegin(STANDARD_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.standardList.size()));
          for (StandardAd _iter97 : struct.standardList)
          {
            _iter97.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.byteList != null) {
        oprot.writeFieldBegin(BYTE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, struct.byteList.size()));
          for (byte _iter98 : struct.byteList)
          {
            oprot.writeByte(_iter98);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.shortList != null) {
        oprot.writeFieldBegin(SHORT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.shortList.size()));
          for (short _iter99 : struct.shortList)
          {
            oprot.writeI16(_iter99);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.intList != null) {
        oprot.writeFieldBegin(INT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.intList.size()));
          for (int _iter100 : struct.intList)
          {
            oprot.writeI32(_iter100);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.longList != null) {
        oprot.writeFieldBegin(LONG_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.longList.size()));
          for (long _iter101 : struct.longList)
          {
            oprot.writeI64(_iter101);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.mapString != null) {
        oprot.writeFieldBegin(MAP_STRING_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.mapString.size()));
          for (java.util.Map.Entry<String, String> _iter102 : struct.mapString.entrySet())
          {
            oprot.writeString(_iter102.getKey());
            oprot.writeString(_iter102.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.mapAd != null) {
        oprot.writeFieldBegin(MAP_AD_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.mapAd.size()));
          for (java.util.Map.Entry<String, StandardAd> _iter103 : struct.mapAd.entrySet())
          {
            oprot.writeString(_iter103.getKey());
            _iter103.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.intPair != null) {
        if (struct.isSetIntPair()) {
          oprot.writeFieldBegin(INT_PAIR_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.intPair.size()));
            for (java.util.Map.Entry<Integer, String> _iter104 : struct.intPair.entrySet())
            {
              oprot.writeI32(_iter104.getKey());
              oprot.writeString(_iter104.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.spec != null) {
        oprot.writeFieldBegin(SPEC_FIELD_DESC);
        struct.spec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeByte(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
      oprot.writeI16(struct.category);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHORTID_FIELD_DESC);
      oprot.writeI32(struct.shortid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEQ_FIELD_DESC);
      oprot.writeI64(struct.seq);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeBinary(struct.content);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_START_FIELD_DESC);
      oprot.writeBool(struct.isStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PERCENT_FIELD_DESC);
      oprot.writeDouble(struct.percent);
      oprot.writeFieldEnd();
      if (struct.adStyle != null) {
        oprot.writeFieldBegin(AD_STYLE_FIELD_DESC);
        oprot.writeI32(struct.adStyle.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CreativeAllTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CreativeAllTupleScheme getScheme() {
      return new CreativeAllTupleScheme();
    }
  }

  private static class CreativeAllTupleScheme extends org.apache.thrift.scheme.TupleScheme<CreativeAll> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CreativeAll struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetStandardList()) {
        optionals.set(1);
      }
      if (struct.isSetByteList()) {
        optionals.set(2);
      }
      if (struct.isSetShortList()) {
        optionals.set(3);
      }
      if (struct.isSetIntList()) {
        optionals.set(4);
      }
      if (struct.isSetLongList()) {
        optionals.set(5);
      }
      if (struct.isSetMapString()) {
        optionals.set(6);
      }
      if (struct.isSetMapAd()) {
        optionals.set(7);
      }
      if (struct.isSetIntPair()) {
        optionals.set(8);
      }
      if (struct.isSetSpec()) {
        optionals.set(9);
      }
      if (struct.isSetType()) {
        optionals.set(10);
      }
      if (struct.isSetCategory()) {
        optionals.set(11);
      }
      if (struct.isSetShortid()) {
        optionals.set(12);
      }
      if (struct.isSetSeq()) {
        optionals.set(13);
      }
      if (struct.isSetName()) {
        optionals.set(14);
      }
      if (struct.isSetContent()) {
        optionals.set(15);
      }
      if (struct.isSetIsStart()) {
        optionals.set(16);
      }
      if (struct.isSetPercent()) {
        optionals.set(17);
      }
      if (struct.isSetAdStyle()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetStandardList()) {
        {
          oprot.writeI32(struct.standardList.size());
          for (StandardAd _iter105 : struct.standardList)
          {
            _iter105.write(oprot);
          }
        }
      }
      if (struct.isSetByteList()) {
        {
          oprot.writeI32(struct.byteList.size());
          for (byte _iter106 : struct.byteList)
          {
            oprot.writeByte(_iter106);
          }
        }
      }
      if (struct.isSetShortList()) {
        {
          oprot.writeI32(struct.shortList.size());
          for (short _iter107 : struct.shortList)
          {
            oprot.writeI16(_iter107);
          }
        }
      }
      if (struct.isSetIntList()) {
        {
          oprot.writeI32(struct.intList.size());
          for (int _iter108 : struct.intList)
          {
            oprot.writeI32(_iter108);
          }
        }
      }
      if (struct.isSetLongList()) {
        {
          oprot.writeI32(struct.longList.size());
          for (long _iter109 : struct.longList)
          {
            oprot.writeI64(_iter109);
          }
        }
      }
      if (struct.isSetMapString()) {
        {
          oprot.writeI32(struct.mapString.size());
          for (java.util.Map.Entry<String, String> _iter110 : struct.mapString.entrySet())
          {
            oprot.writeString(_iter110.getKey());
            oprot.writeString(_iter110.getValue());
          }
        }
      }
      if (struct.isSetMapAd()) {
        {
          oprot.writeI32(struct.mapAd.size());
          for (java.util.Map.Entry<String, StandardAd> _iter111 : struct.mapAd.entrySet())
          {
            oprot.writeString(_iter111.getKey());
            _iter111.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetIntPair()) {
        {
          oprot.writeI32(struct.intPair.size());
          for (java.util.Map.Entry<Integer, String> _iter112 : struct.intPair.entrySet())
          {
            oprot.writeI32(_iter112.getKey());
            oprot.writeString(_iter112.getValue());
          }
        }
      }
      if (struct.isSetSpec()) {
        struct.spec.write(oprot);
      }
      if (struct.isSetType()) {
        oprot.writeByte(struct.type);
      }
      if (struct.isSetCategory()) {
        oprot.writeI16(struct.category);
      }
      if (struct.isSetShortid()) {
        oprot.writeI32(struct.shortid);
      }
      if (struct.isSetSeq()) {
        oprot.writeI64(struct.seq);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetContent()) {
        oprot.writeBinary(struct.content);
      }
      if (struct.isSetIsStart()) {
        oprot.writeBool(struct.isStart);
      }
      if (struct.isSetPercent()) {
        oprot.writeDouble(struct.percent);
      }
      if (struct.isSetAdStyle()) {
        oprot.writeI32(struct.adStyle.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CreativeAll struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list113 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.standardList = new java.util.ArrayList<StandardAd>(_list113.size);
          StandardAd _elem114;
          for (int _i115 = 0; _i115 < _list113.size; ++_i115)
          {
            _elem114 = new StandardAd();
            _elem114.read(iprot);
            struct.standardList.add(_elem114);
          }
        }
        struct.setStandardListIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list116 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.byteList = new java.util.ArrayList<Byte>(_list116.size);
          byte _elem117;
          for (int _i118 = 0; _i118 < _list116.size; ++_i118)
          {
            _elem117 = iprot.readByte();
            struct.byteList.add(_elem117);
          }
        }
        struct.setByteListIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list119 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.shortList = new java.util.ArrayList<Short>(_list119.size);
          short _elem120;
          for (int _i121 = 0; _i121 < _list119.size; ++_i121)
          {
            _elem120 = iprot.readI16();
            struct.shortList.add(_elem120);
          }
        }
        struct.setShortListIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list122 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.intList = new java.util.ArrayList<Integer>(_list122.size);
          int _elem123;
          for (int _i124 = 0; _i124 < _list122.size; ++_i124)
          {
            _elem123 = iprot.readI32();
            struct.intList.add(_elem123);
          }
        }
        struct.setIntListIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.longList = new java.util.ArrayList<Long>(_list125.size);
          long _elem126;
          for (int _i127 = 0; _i127 < _list125.size; ++_i127)
          {
            _elem126 = iprot.readI64();
            struct.longList.add(_elem126);
          }
        }
        struct.setLongListIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map128 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.mapString = new java.util.HashMap<String,String>(2*_map128.size);
          String _key129;
          String _val130;
          for (int _i131 = 0; _i131 < _map128.size; ++_i131)
          {
            _key129 = iprot.readString();
            _val130 = iprot.readString();
            struct.mapString.put(_key129, _val130);
          }
        }
        struct.setMapStringIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map132 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.mapAd = new java.util.HashMap<String,StandardAd>(2*_map132.size);
          String _key133;
          StandardAd _val134;
          for (int _i135 = 0; _i135 < _map132.size; ++_i135)
          {
            _key133 = iprot.readString();
            _val134 = new StandardAd();
            _val134.read(iprot);
            struct.mapAd.put(_key133, _val134);
          }
        }
        struct.setMapAdIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map136 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.intPair = new java.util.HashMap<Integer,String>(2*_map136.size);
          int _key137;
          String _val138;
          for (int _i139 = 0; _i139 < _map136.size; ++_i139)
          {
            _key137 = iprot.readI32();
            _val138 = iprot.readString();
            struct.intPair.put(_key137, _val138);
          }
        }
        struct.setIntPairIsSet(true);
      }
      if (incoming.get(9)) {
        struct.spec = new StandardAd();
        struct.spec.read(iprot);
        struct.setSpecIsSet(true);
      }
      if (incoming.get(10)) {
        struct.type = iprot.readByte();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.category = iprot.readI16();
        struct.setCategoryIsSet(true);
      }
      if (incoming.get(12)) {
        struct.shortid = iprot.readI32();
        struct.setShortidIsSet(true);
      }
      if (incoming.get(13)) {
        struct.seq = iprot.readI64();
        struct.setSeqIsSet(true);
      }
      if (incoming.get(14)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(15)) {
        struct.content = iprot.readBinary();
        struct.setContentIsSet(true);
      }
      if (incoming.get(16)) {
        struct.isStart = iprot.readBool();
        struct.setIsStartIsSet(true);
      }
      if (incoming.get(17)) {
        struct.percent = iprot.readDouble();
        struct.setPercentIsSet(true);
      }
      if (incoming.get(18)) {
        struct.adStyle = com.github.rolandhe.thrift.enhancer.test.AdStyle.findByValue(iprot.readI32());
        struct.setAdStyleIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

